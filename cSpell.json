// This file is copied from IBM's closed source configuration. When updating it
// here, also update the closed source repository, or ask a maintainer to do so
// if you do not have access.
{
  "version": "0.2",
  "language": "en",
  "allowCompoundWords": true,
  "words": [
    "Aaronson",
    "Ahokas",
    "Abelian",
    "Abhari",
    "Almaden",
    "Alon",
    "Ambainis",
    "Ansatz",
    "anticommute",
    "anticommutes",
    "arccos",
    "arcsin",
    "arctan",
    "argsort",
    "arity",
    "autodifferentiation",
    "ancillae",
    "ancillas",
    "ansatzes",
    "bijective",
    "Boeblingen",
    "Bravyi",
    "Bremner",
    "Bruhat",
    "Bures",
    "Canonicalization",
    "Capelluto",
    "Chebyshev",
    "Choi",
    "Chong",
    "CHSH",
    "Chuang",
    "qubit",
    "qubits",
    "Qiskit",
    "qasm",
    "Hamiltonians",
    "Eigensolver",
    "Eigensolvers",
    "EPLG",
    "Factorizers",
    "exponentials",
    "Hadamard",
    "matplotlib",
    "numpy",
    "Kraus",
    "unitaries",
    "decomp",
    "Paulis",
    "Cleve",
    "Trotterization",
    "Trotterizations",
    "Solovay",
    "Kitaev",
    "Cliffords",
    "connectivities",
    "Cuccaro",
    "destabilizer",
    "detuning",
    "Dueck",
    "Easwar",
    "eigenstate",
    "eigenstates",
    "Eisert",
    "equispaced",
    "fermionic",
    "Frobenius",
    "Gosset",
    "Gottesman",
    "Gushu",
    "Häner",
    "Hardamard",
    "Havlicek",
    "Hein",
    "Hiptmair",
    "Hoare",
    "Hoyer",
    "initialised",
    "initialiser",
    "ints",
    "Ipython",
    "ipywidgets",
    "Ising",
    "Iten",
    "Itoko",
    "Javadi",
    "Jurcevic",
    "Ketan",
    "Koenig",
    "Kolkata",
    "Kutin",
    "Lauer",
    "Margolus",
    "Martonosi",
    "Maslov",
    "Merkel",
    "Mølmer",
    "Moscas",
    "Motzoi",
    "Moyard",
    "multinomial",
    "multiqubit",
    "Murali",
    "Nannicini",
    "Nesterov’s",
    "Neumann",
    "openqasm",
    "Ourense",
    "parameterizing",
    "Paulihedral",
    "polynomially",
    "Poppler",
    "Prakash",
    "pygments",
    "pyplot",
    "Raban",
    "Rebentrost",
    "Renato",
    "Renner",
    "rescheduler",
    "resynthesized",
    "Roetteler",
    "Rueschlikon",
    "schedulable",
    "Shaohan",
    "Shaydulin",
    "Shende",
    "Shor’s",
    "Simonetto",
    "Smolin",
    "Sørensen",
    "struct",
    "structs",
    "Sutter",
    "Svore",
    "Symegine",
    "symplectic",
    "tensored",
    "Theor",
    "Toffoli",
    "uncompiled",
    "uncompute",
    "uncomputed",
    "unentanglement",
    "unnormalized",
    "Unroller",
    "Vazirani",
    "Vedral",
    "Watrous",
    "Weyl",
    "Woerner",
    "Yufei",
    "Zoufal",
    "Mosca",
    "pydot",
    "qudit",
    "qutrit",
    "Uhrig",
    "saveas",
    "Tapp",
    "extremal",
    "Anharmonicity",
    "ALAP",
    "atol",
    "ASPLOS",
    "BFGS",
    "CDKM",
    "CNOT",
    "stddev",
    "expval",
    "qsphere",
    "cargs",
    "cbit",
    "cbits",
    "opflow",
    "qobj",
    "ibmq",
    "clbit",
    "Clbits",
    "cmap",
    "cnots",
    "coeff",
    "coeffs",
    "CPLEX",
    "CPTP",
    "creg",
    "cregs",
    "csdg",
    "CSWAP",
    "CVXPY",
    "DIMACS",
    "docplex",
    "dtype",
    "Fieldr",
    "fsim",
    "kwarg",
    "kwargs",
    "kwparams",
    "lnot",
    "mathbb",
    "nqubits",
    "paulivec",
    "qarg",
    "qargs",
    "qreg",
    "qregs",
    "regs",
    "xgate",
    "basicaer",
    "basicaererror",
    "cregbundle",
    "iqft",
    "iswap",
    "MCMT",
    "MCMTV",
    "ndarray",
    "NISQ",
    "nxpd",
    "oper",
    "PRNG",
    "QAOA",
    "rcccx",
    "RCCX",
    "repr",
    "rtol",
    "rustworkx",
    "sched",
    "sxdg",
    "srepr",
    "sympy",
    "TOQM",
    "uchannel",
    "UCRX",
    "UCRY",
    "UCRZ",
    "XIYY",
    "ZSXX",
    "qelib",
    "QVSM",
    "ITTL",
    "QRTE",
    "mathrm",
    "exponentiated",
    "simulable",
    "resynthesizes"
  ],
  "ignoreRegExpList": [
    // Markdown links
    "\\((.*)\\)",
    // markdown code blocks. https://github.com/streetsidesoftware/vscode-spell-checker/issues/202#issuecomment-377477473
    "/^\\s*```[\\s\\S]*?^\\s*```/gm",
    // inline code blocks. https://stackoverflow.com/questions/41274241/how-to-capture-inline-markdown-code-but-not-a-markdown-code-fence-with-regex
    "\\`([^\\`].*?)\\`",
    // $$ ... $$ code blocks
    "\\$\\$\n(?:.*\n)*?\\$\\$",
    // markdown metadata block. e.g. title, description, etc.
    "---\n(?:.*\n)*?---",
    // words inside curly braces. e.g. {word}
    "{\\w+}",
    // words inside colons. e.g. :word:
    ":\\S+:",
    // words joined by underscores. e.g. hello_world, NEW_KEY_VALUE
    "\\S+_\\S+(_\\S+)*",
    // separate line <span id="" /> tags
    "^<span id=\\S+ />$"
  ],
  "ignorePaths": [
    // We cannot easily control these API docs since they live in other repositories.
    "docs/api"
  ]
}
